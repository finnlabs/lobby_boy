<%= javascript_include_tag 'jquery' %>
<%= javascript_include_tag 'js.cookie-1.5.1.min' %>

<%#
    We're defining all this Javascript here as we are using URL helpers in it which
    won't work in a .js.erb file without cheating.
 %>

<script type="text/javascript">
    Cookies.json = true;

    window.parent.OpenIDConnect = new function() {
        var self = this;

        this.clientId = "<%= LobbyBoy.provider.client_id %>";
        this.targetOrigin = "<%= LobbyBoy.provider.issuer %>";
        this.loggedIn = false;

        this.checkSession = function() {
            var provider = window.parent.document.getElementById("openid_connect_provider").contentWindow;

            var message = function(state) {
                return self.clientId + " " + state;
            };
            var checkState = function(state) {
                console.log("got new session state: " + state);
                provider.postMessage(message(state), self.targetOrigin);
            };

            console.log("RP session state: " + Cookies.get('oidc_rp_state'));

            var state = Cookies.get("oidc_rp_state");
            var time = new Date().getTime() / 1000;
            var offset = <%= LobbyBoy.client.refresh_offset %>;

            if (state !== undefined) {
                self.loggedIn = true;
                if (state.expires_at - time > offset) {
                    checkState(state.state);
                } else {
                    checkState("refresh.please");
                }
            } else {
                console.log("user is not logged in");
                // not logged in
            }
        };

        this.startTimer = function() {
            self.timerID = setInterval(self.checkSession, 10 * 1000);
        };

        this.stopTimer = function() {
            clearInterval(self.timerID)
        };

        this.reauthenticate = function() {
            console.log("I ought to re-authenticate");
            jQuery.ajax({
                url: "<%= session_refresh_url %>",
                async: true,
                success: self.onReauthenticationSuccess,
                error: self.onReauthenticationFailure,
                xhrFields: { withCredentials: true }
            });
        };

        this.onReauthenticationSuccess = function(state) {
            self.state = state;
            console.log("Re-authenticated successfully.");

            /**
             * The login status will only be updated with the next call of checkSession
             * which is why it may still be false at this point.
             *
             * If it is false it means the user may be seeing a sign-in button in the menu.
             * So reload the page to have them see that they are now logged in.
             */
            if (self.loggedIn === false) {
                self.onLogin();
            }
        };

        this.onReauthenticationFailure = function(xhr, status) {
            self.onLogout();
        };

        this.onLogin = function() {
            window.parent.document.location.reload();
        };

        this.onLogout = function() {
            if (self.loggedIn !== false) {
                self.logout(function() {
                    alert("You've been logged out.");
                });
            }
        };

        this.logout = function(callback) {
            console.log("I ought to log out.");
            jQuery.ajax({
                url: "<%= session_end_url %>",
                async: true,
                complete: function(xhr, status) {
                    self.loggedIn = false;
                    if (callback) {
                        callback();
                    }
                },
                xhrFields: { withCredentials: true }
            });
        };

        this.receiveMessage = function(e) {
            if (e.origin !== self.targetOrigin ) {
                return;
            }

            self.state = e.data;

            if (self.state == "changed") {
                self.reauthenticate();
            } else if (self.state == "error") {
                console.log("error checking session state");
            }
        };

        window.addEventListener("message", self.receiveMessage, false);

        self.startTimer();
    };
</script>
